name: Deploy to GitHub Pages

on:
  push:
    branches:
      - master
      - main

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Get repository info for GitHub Pages
        id: repo-info
        run: |
          REPO_OWNER=$(echo '${{ github.repository }}' | awk -F '/' '{print $1}')
          REPO_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')

          # Check if this is a user/org page (repo name is username.github.io)
          if [[ "$REPO_NAME" == "$REPO_OWNER.github.io" ]]; then
            echo "IS_USER_PAGE=true" >> $GITHUB_ENV
            echo "PUBLIC_PATH=/" >> $GITHUB_ENV
          else
            echo "IS_USER_PAGE=false" >> $GITHUB_ENV
            echo "PUBLIC_PATH=/$REPO_NAME/" >> $GITHUB_ENV
          fi

          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "Public Path: $PUBLIC_PATH" >> $GITHUB_STEP_SUMMARY

      - name: Create webpack config for GitHub Pages
        run: |
          cat > webpack.gh-pages.js << 'EOF'
          const config = require('./webpack.config.js');
          const webpack = require('webpack');

          // Set the public path for GitHub Pages
          config.output.publicPath = '${PUBLIC_PATH}';

          // Add plugin to define PUBLIC_PATH for use in the app
          config.plugins.push(
            new webpack.DefinePlugin({
              'process.env.PUBLIC_PATH': JSON.stringify('${PUBLIC_PATH}'),
            })
          );

          module.exports = config;
          EOF

          # Replace ${PUBLIC_PATH} with the actual path
          sed -i "s#\${PUBLIC_PATH}#$PUBLIC_PATH#g" webpack.gh-pages.js

      - name: Build
        run: |
          # Create a production build with the correct public path
          NODE_ENV=production npx webpack --config webpack.gh-pages.js --mode production

          # Create .nojekyll file to disable Jekyll processing
          touch dist/.nojekyll

          # Create a simple test index.html in case the main one has issues
          cat > dist/test.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="UTF-8">
              <title>GitHub Pages Test</title>
            </head>
            <body>
              <h1>GitHub Pages Test Page</h1>
              <p>If you can see this, GitHub Pages is correctly set up!</p>
              <p>Try accessing the <a href="index.html">main application</a>.</p>
            </body>
          </html>
          EOF

          # Create 404.html for SPA routing
          cat > dist/404.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="utf-8">
              <title>Single Page Apps for GitHub Pages</title>
              <script type="text/javascript">
                // Single Page Apps for GitHub Pages
                // MIT License
                // https://github.com/rafgraph/spa-github-pages
                var pathSegmentsToKeep = 1;
                var l = window.location;
                l.replace(
                  l.protocol + '//' + l.hostname + (l.port ? ':' + l.port : '') +
                  l.pathname.split('/').slice(0, 1 + pathSegmentsToKeep).join('/') + '/?p=/' +
                  l.pathname.slice(1).split('/').slice(pathSegmentsToKeep).join('/').replace(/&/g, '~and~') +
                  (l.search ? '&q=' + l.search.slice(1).replace(/&/g, '~and~') : '') +
                  l.hash
                );
              </script>
            </head>
            <body>
            </body>
          </html>
          EOF

          # Ensure index.html exists in the dist directory
          if [ ! -f "dist/index.html" ]; then
            echo "Error: index.html was not generated in the dist directory"
            exit 1
          fi

          # Print the contents of the dist directory for debugging
          echo "Contents of dist directory:"
          ls -la dist/

      - name: Copy assets to dist
        run: |
          if [ -d "public/assets" ]; then
            mkdir -p dist/assets
            cp -r public/assets/* dist/assets/
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "dist"
          # Use a unique name with timestamp to avoid conflicts
          name: github-pages-${{ github.run_id }}

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          # Reference the unique artifact name
          artifact_name: github-pages-${{ github.run_id }}
