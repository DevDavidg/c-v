name: Deploy to GitHub Pages

on:
  push:
    branches:
      - master
      - main

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Get repository info for GitHub Pages
        id: repo-info
        run: |
          REPO_OWNER=$(echo '${{ github.repository }}' | awk -F '/' '{print $1}')
          REPO_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')

          # Check if this is a user/org page (repo name is username.github.io)
          if [[ "$REPO_NAME" == "$REPO_OWNER.github.io" ]]; then
            echo "IS_USER_PAGE=true" >> $GITHUB_ENV
            echo "PUBLIC_PATH=/" >> $GITHUB_ENV
          else
            echo "IS_USER_PAGE=false" >> $GITHUB_ENV
            echo "PUBLIC_PATH=/$REPO_NAME/" >> $GITHUB_ENV
          fi

          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

          # Log for debugging
          echo "Public Path: $PUBLIC_PATH"

      - name: Create webpack config for GitHub Pages
        run: |
          cat > webpack.gh-pages.js << 'EOF'
          const config = require('./webpack.config.js');
          const webpack = require('webpack');

          // Set the public path for GitHub Pages
          config.output.publicPath = '${PUBLIC_PATH}';

          // Add plugin to define PUBLIC_PATH for use in the app
          config.plugins.push(
            new webpack.DefinePlugin({
              'process.env.PUBLIC_PATH': JSON.stringify('${PUBLIC_PATH}'),
            })
          );

          module.exports = config;
          EOF

          # Replace ${PUBLIC_PATH} with the actual path
          sed -i "s#\${PUBLIC_PATH}#$PUBLIC_PATH#g" webpack.gh-pages.js

      - name: Create 404.html for SPA routing
        run: |
          mkdir -p public

          # Set segmentCount based on whether it's a user page or not
          if [[ "$IS_USER_PAGE" == "true" ]]; then
            SEGMENT_COUNT=0
          else
            SEGMENT_COUNT=1
          fi

          cat > public/404.html << EOF
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="utf-8">
              <title>Single Page Apps for GitHub Pages</title>
              <script type="text/javascript">
                // Single Page Apps for GitHub Pages
                // MIT License
                // https://github.com/rafgraph/spa-github-pages
                var segmentCount = ${SEGMENT_COUNT};
                var l = window.location;
                l.replace(
                  l.protocol + '//' + l.hostname + (l.port ? ':' + l.port : '') +
                  l.pathname.split('/').slice(0, 1 + segmentCount).join('/') + '/?p=/' +
                  l.pathname.slice(1).split('/').slice(segmentCount).join('/').replace(/&/g, '~and~') +
                  (l.search ? '&q=' + l.search.slice(1).replace(/&/g, '~and~') : '') +
                  l.hash
                );
              </script>
            </head>
            <body>
            </body>
          </html>
          EOF

      - name: Build
        run: |
          # Create a production build with the GitHub Pages config
          NODE_ENV=production PUBLIC_PATH=$PUBLIC_PATH npx webpack --config webpack.gh-pages.js --mode production

          # Create .nojekyll file to disable Jekyll processing
          touch dist/.nojekyll

          # Copy 404.html for SPA routing
          cp public/404.html dist/404.html

          # Add SPA redirect script to index.html
          cat > dist/redirect-script.js << EOF
          // Single Page Apps for GitHub Pages
          // MIT License
          // https://github.com/rafgraph/spa-github-pages
          (function(l) {
            if (l.search[1] === '/' ) {
              var decoded = l.search.slice(1).split('&').map(function(s) { 
                return s.replace(/~and~/g, '&')
              }).join('?');
              window.history.replaceState(null, null,
                  l.pathname.slice(0, -1) + decoded + l.hash
              );
            }
          }(window.location))
          EOF

          # Create a test index.html file in case webpack didn't generate one properly
          if [ ! -f "dist/index.html" ]; then
            cat > dist/index.html << EOF
            <!DOCTYPE html>
            <html>
              <head>
                <meta charset="utf-8">
                <title>GitHub Pages SPA</title>
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <script src="redirect-script.js"></script>
                <base href="$PUBLIC_PATH">
              </head>
              <body>
                <div id="app"></div>
                <script src="bundle.js"></script>
              </body>
            </html>
            EOF
          else
            # Make sure the base tag is set correctly
            grep -q "<base" dist/index.html || sed -i 's/<head>/<head>\\n  <base href="'$PUBLIC_PATH'">/' dist/index.html
          fi

          # Verify that dist/index.html exists and has content
          echo "Verifying index.html content:"
          cat dist/index.html

      - name: Copy assets to dist
        run: |
          # Create assets directory if it doesn't exist
          mkdir -p dist/assets

          # Copy assets if they exist
          if [ -d "public/assets" ]; then
            cp -r public/assets/* dist/assets/ || true
          fi

          # Copy any other public files (except 404.html which we've already handled)
          if [ -d "public" ]; then
            find public -type f -not -name "404.html" -exec cp {} dist/ \; || true
          fi

          # Make sure all directories in dist are readable
          find dist -type d -exec chmod 755 {} \;
          # Make sure all files in dist are readable
          find dist -type f -exec chmod 644 {} \;

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "dist"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
